{
  "foldingStopMarker": "^\\s*\\}",
  "foldingStartMarker": "\\{\\s*$",
  "repository": {
    "braces": {
      "begin": "(?:^|(?<=\\s))\\{",
      "endCaptures": { "1": { "name": "invalid.illegal.tcl" } },
      "end": "\\}([^\\s\\]]*)",
      "comment": "matches a single brace-enclosed word",
      "patterns": [
        { "match": "\\\\[{}\\n]", "name": "constant.character.escape.tcl" },
        { "include": "#inner-braces" }
      ]
    },
    "escape": {
      "match": "\\\\(\\d{1,3}|x[a-fA-F0-9]+|u[a-fA-F0-9]{1,4}|.|\\n)",
      "name": "constant.character.escape.tcl"
    },
    "regexp": {
      "begin": "(?=\\S)(?![\\n;\\]])",
      "end": "(?=[\\n;\\]])",
      "comment": "matches a single word, named as a regexp, then swallows the rest of the command",
      "patterns": [
        {
          "begin": "(?=[^ \\t\\n;])",
          "end": "(?=[ \\t\\n;])",
          "patterns": [
            { "include": "#braces" },
            { "include": "#bare-string" },
            { "include": "#escape" },
            { "include": "#variable" }
          ],
          "name": "string.regexp.tcl"
        },
        {
          "begin": "[ \\t]",
          "end": "(?=[\\n;\\]])",
          "comment": "swallow the rest of the command",
          "patterns": [
            { "include": "#variable" },
            { "include": "#embedded" },
            { "include": "#escape" },
            { "include": "#braces" },
            { "include": "#string" }
          ]
        }
      ]
    },
    "string": {
      "begin": "(?:^|(?<=\\s))(?=\")",
      "applyEndPatternLast": 1,
      "end": "",
      "comment": "matches a single quote-enclosed word with scoping",
      "name": "string.quoted.double.tcl",
      "patterns": [{ "include": "#bare-string" }]
    },
    "operator": {
      "match": "(?<= |\\d)(-|\\+|~|&{1,2}|\\|{1,2}|<{1,2}|>{1,2}|\\*{1,2}|!|%|\\/|<=|>=|={1,2}|!=|\\^)(?= |\\d)",
      "name": "keyword.operator.tcl"
    },
    "embedded": {
      "begin": "\\[",
      "endCaptures": {
        "0": { "name": "punctuation.section.embedded.end.tcl" }
      },
      "end": "\\]",
      "patterns": [{ "include": "source.tcl" }],
      "name": "source.tcl.embedded",
      "beginCaptures": {
        "0": { "name": "punctuation.section.embedded.begin.tcl" }
      }
    },
    "variable": {
      "match": "(\\$)((?:[a-zA-Z0-9_]|::)+(\\([^\\)]+\\))?|\\{[^\\}]*\\})",
      "name": "support.function.tcl",
      "captures": { "1": { "name": "punctuation.definition.variable.tcl" } }
    },
    "numeric": {
      "match": "(?<![a-zA-Z])([+-]?([0-9]*[.])?[0-9]+f?)(?![\\.a-zA-Z])",
      "name": "constant.numeric.tcl"
    },
    "bare-string": {
      "begin": "(?:^|(?<=\\s))\"",
      "endCaptures": { "1": { "name": "invalid.illegal.tcl" } },
      "end": "\"([^\\s\\]]*)",
      "comment": "matches a single quote-enclosed word without scoping",
      "patterns": [{ "include": "#escape" }, { "include": "#variable" }]
    },
    "inner-braces": {
      "begin": "\\{",
      "end": "\\}",
      "comment": "matches a nested brace in a brace-enclosed word",
      "patterns": [
        { "match": "\\\\[{}\\n]", "name": "constant.character.escape.tcl" },
        { "include": "#inner-braces" }
      ]
    }
  },
  "keyEquivalent": "^~T",
  "fileTypes": ["tcl"],
  "uuid": "62E11136-D9E5-461C-BE98-54E3A2A9E5E3",
  "patterns": [
    {
      "begin": "(?<=^|;)\\s*((#))",
      "end": "\\n",
      "patterns": [{ "match": "(\\\\\\\\|\\\\\\n)" }],
      "contentName": "comment.line.number-sign.tcl",
      "beginCaptures": {
        "1": { "name": "comment.line.number-sign.tcl" },
        "2": { "name": "punctuation.definition.comment.tcl" }
      }
    },
    {
      "match": "(?<=^|[\\[{;])\\s*(if|while|for|catch|default|return|break|continue|switch|exit|foreach|try|throw)\\b",
      "captures": { "1": { "name": "keyword.control.tcl" } }
    },
    {
      "match": "(?<=^|})\\s*(then|elseif|else)\\b",
      "captures": { "1": { "name": "keyword.control.tcl" } }
    },
    {
      "match": "(?<=^|{)\\s*(proc)\\s+([^\\s]+)",
      "captures": {
        "1": { "name": "keyword.other.tcl" },
        "2": { "name": "entity.name.function.tcl" }
      }
    },
    {
      "match": "(?<=^|[\\[{;])\\s*(after|append|array|auto_execok|auto_import|auto_load|auto_mkindex|auto_mkindex_old|auto_qualify|auto_reset|bgerror|binary|cd|clock|close|concat|dde|encoding|eof|error|eval|exec|expr|fblocked|fconfigure|fcopy|file|fileevent|filename|flush|format|gets|glob|global|history|http|incr|info|interp|join|lappend|library|lindex|linsert|list|llength|load|lrange|lreplace|lsearch|lset|lsort|memory|msgcat|namespace|open|package|parray|pid|pkg::create|pkg_mkIndex|proc|puts|pwd|re_syntax|read|registry|rename|resource|scan|seek|set|socket|SafeBase|source|split|string|subst|Tcl|tcl_endOfWord|tcl_findLibrary|tcl_startOfNextWord|tcl_startOfPreviousWord|tcl_wordBreakAfter|tcl_wordBreakBefore|tcltest|tclvars|tell|time|trace|unknown|unset|update|uplevel|upvar|variable|vwait)\\b",
      "captures": { "1": { "name": "keyword.other.tcl" } }
    },
    {
      "begin": "(?<=^|[\\[{;])\\s*(regexp|regsub)\\b\\s*",
      "end": "[\\n;\\]]",
      "comment": "special-case regexp/regsub keyword in order to handle the expression",
      "patterns": [
        { "match": "\\\\(?:.|\\n)", "name": "constant.character.escape.tcl" },
        { "comment": "switch for regexp", "match": "-\\w+\\s*" },
        {
          "begin": "--\\s*",
          "applyEndPatternLast": 1,
          "end": "",
          "comment": "end of switches",
          "patterns": [{ "include": "#regexp" }]
        },
        { "include": "#regexp" }
      ],
      "beginCaptures": { "1": { "name": "keyword.other.tcl" } }
    },
    { "include": "#escape" },
    { "include": "#variable" },
    { "include": "#operator" },
    { "include": "#numeric" },
    {
      "begin": "\"",
      "endCaptures": {
        "0": { "name": "punctuation.definition.string.end.tcl" }
      },
      "end": "\"",
      "patterns": [
        { "include": "#escape" },
        { "include": "#variable" },
        { "include": "#embedded" }
      ],
      "name": "string.quoted.double.tcl",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.begin.tcl" }
      }
    }
  ],
  "name": "Tcl",
  "scopeName": "source.tcl"
}
